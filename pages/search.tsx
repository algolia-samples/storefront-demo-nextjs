import { useState } from 'react';
import Head from 'next/head';
import { Dialog } from '@headlessui/react';
import { XIcon } from '@heroicons/react/outline';
import { PlusSmIcon } from '@heroicons/react/solid';

import {
  Configure,
  CurrentRefinements,
  InfiniteHits,
  InstantSearch,
  RangeInput,
  RefinementList,
  SortBy,
  useCurrentRefinements,
} from 'react-instantsearch-hooks-web';
import algoliasearch from 'algoliasearch/lite';

import { Filter, FilterProps } from '../components/Filter';
import { HitComponent } from '../components/HitComponent';

import { breadcrumbs } from '../mock';

const searchClient = algoliasearch(
  'latency',
  'b9df6a359f9fd849b653ee9e779775be'
);

const FILTER_LABEL_MAP: Record<string, string> = {
  available_sizes: 'Size',
  brand: 'Brand',
  'color.original_name': 'Color',
  'price.value': 'Price',
};

const refinementListClassNames: Parameters<
  typeof RefinementList
>[0]['classNames'] = {
  list: 'pt-6 space-y-3',
  item: 'flex items-center',
  checkbox:
    'h-4 w-4 border-gray-300 rounded text-indigo-600 focus:ring-indigo-500',
  labelText: 'ml-3 text-sm text-gray-600',
  count:
    'ml-1.5 rounded bg-gray-200 py-0.5 px-1.5 text-xs font-semibold tabular-nums text-gray-700',
};

function EmptyFiltersWrapper({ children }: React.PropsWithChildren) {
  const { canRefine } = useCurrentRefinements();
  return <>{canRefine ? children : null}</>;
}

function Filters({ type }: Pick<FilterProps, 'type'>) {
  return (
    <>
      <Filter header="Brand" type={type}>
        <RefinementList
          attribute="brand"
          limit={8}
          classNames={refinementListClassNames}
        />
      </Filter>
      <Filter header="Color" type={type} className="pt-10">
        <RefinementList
          attribute="color.original_name"
          limit={8}
          transformItems={(items) =>
            items.map((item) => ({
              ...item,
              label:
                item.label.slice(0, 1).toLocaleUpperCase() +
                item.label.slice(1),
            }))
          }
          classNames={refinementListClassNames}
        />
      </Filter>
      <Filter header="Size" type={type} className="pt-10">
        <RefinementList
          attribute="available_sizes"
          limit={8}
          classNames={refinementListClassNames}
        />
      </Filter>
      <Filter header="Price range" type={type} className="pt-10">
        <RangeInput
          attribute="price.value"
          classNames={{
            form: 'pt-6 flex space-x-4 justify-between',
            input:
              'block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm',
            separator: 'self-center text-sm font-medium text-gray-500',
            submit:
              'rounded-md bg-gray-200 px-4 text-sm font-medium text-gray-600 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-gray-50',
          }}
        />
      </Filter>
    </>
  );
}

export default function Search() {
  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <InstantSearch
        searchClient={searchClient}
        indexName="PROD_pwa_ecom_ui_template_products"
        routing={true}
      >
        <Configure hitsPerPage={9} />
        {/* Mobile filter dialog */}
        <Dialog
          as="div"
          className="relative z-40 lg:hidden"
          open={mobileFiltersOpen}
          onClose={setMobileFiltersOpen}
          unmount={false}
        >
          <div className="fixed inset-0 bg-black bg-opacity-25" />

          <div className="fixed inset-0 flex z-40">
            <Dialog.Panel className="ml-auto relative max-w-xs w-full h-full bg-white shadow-xl py-4 pb-6 flex flex-col overflow-y-auto">
              <div className="px-4 flex items-center justify-between">
                <h2 className="text-lg font-medium text-gray-900">Filters</h2>
                <button
                  type="button"
                  className="-mr-2 w-10 h-10 p-2 flex items-center justify-center text-gray-400 hover:text-gray-500"
                  onClick={() => setMobileFiltersOpen(false)}
                >
                  <span className="sr-only">Close menu</span>
                  <XIcon className="h-6 w-6" aria-hidden="true" />
                </button>
              </div>

              {/* Filters */}
              <div className="mt-4">
                <Filters type="disclosure" />
              </div>
            </Dialog.Panel>
          </div>
        </Dialog>

        {/* Breadcrumb */}
        <div className="border-b border-gray-200">
          <nav
            aria-label="Breadcrumb"
            className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"
          >
            <ol
              role="list"
              className="flex items-center space-x-4 py-4 border-t border-gray-200"
            >
              {breadcrumbs.map((breadcrumb, index) => (
                <li key={breadcrumb.id}>
                  <div className="flex items-center">
                    {index > 0 && (
                      <svg
                        viewBox="0 0 6 20"
                        xmlns="http://www.w3.org/2000/svg"
                        aria-hidden="true"
                        className="mr-4 h-5 w-auto text-gray-300"
                      >
                        <path
                          d="M4.878 4.34H3.551L.27 16.532h1.327l3.281-12.19z"
                          fill="currentColor"
                        />
                      </svg>
                    )}
                    <a
                      href={breadcrumb.href}
                      className="text-sm font-medium text-gray-900"
                    >
                      {breadcrumb.name}
                    </a>
                  </div>
                </li>
              ))}
            </ol>
          </nav>
        </div>

        <div className="max-w-2xl mx-auto px-4 lg:max-w-7xl lg:px-8">
          <div className="pt-24 pb-10">
            <h1 className="text-4xl font-bold tracking-tight text-gray-900">
              Back-to-School Sale
            </h1>
            <p className="mt-4 text-base text-gray-500">
              Better than ever, and up to 30% off!
            </p>
          </div>
        </div>

        {/* Active filters */}
        <div className="bg-gray-100 border-t border-gray-200">
          <div className="sm:flex sm:items-center mx-auto sm:px-6 lg:px-8 max-w-7xl">
            <div className="sm:order-2 p-3 sm:p-0 sm:flex-shrink-0">
              <SortBy
                items={[
                  {
                    label: 'Sort by relevance',
                    value: 'PROD_pwa_ecom_ui_template_products',
                  },
                  {
                    label: 'Sort by price (low to high)',
                    value: 'PROD_pwa_ecom_ui_template_products_price_asc',
                  },
                  {
                    label: 'Sort by price (high to low)',
                    value: 'PROD_pwa_ecom_ui_template_products_price_desc',
                  },
                ]}
                classNames={{
                  select:
                    'w-full m-0 pl-4 pr-8 py-2 rounded-md border-0 bg-transparent cursor-pointer text-sm font-medium text-gray-500 hover:text-gray-800 focus:outline-none focus:ring-2 focus:ring-indigo-500',
                }}
              />
            </div>
            <div className="border-t border-gray-200 flex-grow sm:flex sm:items-center">
              <EmptyFiltersWrapper>
                <h3 className="text-sm px-7 py-5 sm:p-0 flex-shrink-0 font-medium text-gray-500">
                  Active filters
                </h3>
                <div
                  aria-hidden="true"
                  className="hidden h-5 w-px bg-gray-300 sm:ml-4 sm:block"
                ></div>
              </EmptyFiltersWrapper>
              <CurrentRefinements
                transformItems={(items) =>
                  items.map((item) => ({
                    ...item,
                    label: FILTER_LABEL_MAP[item.label] || item.label,
                  }))
                }
                classNames={{
                  root: 'relative before:content-[""] before:absolute before:w-4 before:h-full before:bg-gradient-to-r before:from-gray-100 after:content-[""] after:absolute after:w-4 after:h-full after:top-0 after:right-0 after:bg-gradient-to-l after:from-gray-100',
                  list: 'flex space-x-4 px-4 pb-4 sm:py-4 overflow-auto',
                  noRefinementList: '!p-0 sm:mt-0.5 sm:h-16',
                  item: 'flex flex-shrink-0 rounded-full border border-gray-200 bg-white py-1.5 pl-3 pr-2 text-sm font-medium text-gray-900',
                  categoryLabel: 'ml-2 font-normal text-gray-700',
                  delete:
                    'ml-1 inline-flex items-center w-4 h-4 flex-shrink-0 rounded-full p-1 hover:!bg-gray-200 text-xs text-gray-400 hover:text-gray-500',
                }}
              />
            </div>
          </div>
        </div>

        <div className="mx-w-2xl mx-auto px-4 lg:max-w-7xl lg:px-8">
          <div className="pt-12 pb-24 lg:grid lg:grid-cols-3 lg:gap-x-8 xl:grid-cols-4">
            <aside>
              <h2 className="sr-only">Filters</h2>

              <button
                type="button"
                className="inline-flex items-center lg:hidden"
                onClick={() => setMobileFiltersOpen(true)}
              >
                <span className="text-sm font-medium text-gray-700">
                  Filters
                </span>
                <PlusIcon
                  className="flex-shrink-0 ml-1 h-5 w-5 text-gray-400"
                  aria-hidden="true"
                />
              </button>

              <div className="hidden lg:block divide-y divide-gray-200 space-y-10">
                <Filters type="list" />
              </div>
            </aside>

            <section
              aria-labelledby="product-heading"
              className="mt-6 lg:mt-0 lg:col-span-2 xl:col-span-3"
            >
              <h2 id="product-heading" className="sr-only">
                Products
              </h2>

              <InfiniteHits
                hitComponent={HitComponent}
                showPrevious={true}
                classNames={{
                  list: 'grid grid-cols-1 gap-y-4 sm:grid-cols-2 sm:gap-x-6 sm:gap-y-10 lg:gap-x-8 xl:grid-cols-3',
                  item: 'relative bg-white border border-gray-200 rounded-lg flex flex-col overflow-hidden',
                  loadPrevious:
                    'mb-10 h-10 w-full items-center rounded-md border border-gray-300 bg-white px-4 hover:bg-gray-100 focus:border-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-opacity-25 focus:ring-offset-1 focus:ring-offset-indigo-600',
                  disabledLoadPrevious: 'hidden',
                  loadMore:
                    'mt-10 h-10 w-full items-center rounded-md border border-gray-300 bg-white px-4 hover:bg-gray-100 focus:border-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:ring-opacity-25 focus:ring-offset-1 focus:ring-offset-indigo-600',
                  disabledLoadMore: 'hidden',
                }}
              />
            </section>
          </div>
        </div>
      </InstantSearch>
    </>
  );
}
