import { Fragment, useState } from 'react';
import Head from 'next/head';
import { Dialog, Transition } from '@headlessui/react';
import { XIcon } from '@heroicons/react/outline';
import { PlusSmIcon } from '@heroicons/react/solid';

import {
  Configure,
  InfiniteHits,
  InstantSearch,
  RangeInput,
  RefinementList,
  SortBy,
} from 'react-instantsearch-hooks-web';
import algoliasearch from 'algoliasearch/lite';

import { Filter, FilterProps } from '../components/Filter';
import { HitComponent } from '../components/HitComponent';

import { breadcrumbs } from '../mock';

const searchClient = algoliasearch(
  'latency',
  'b9df6a359f9fd849b653ee9e779775be'
);

function Filters({ type }: Pick<FilterProps, 'type'>) {
  return (
    <>
      <Filter header="Sort by" type={type}>
        <SortBy
          items={[
            { label: 'Relevance', value: 'PROD_pwa_ecom_ui_template_products' },
            {
              label: 'Price: Low to high',
              value: 'PROD_pwa_ecom_ui_template_products_price_asc',
            },
            {
              label: 'Price: High to low',
              value: 'PROD_pwa_ecom_ui_template_products_price_desc',
            },
          ]}
        />
      </Filter>
      <Filter header="Brand" type={type} className="pt-10">
        <RefinementList attribute="brand" />
      </Filter>
      <Filter header="Color" type={type} className="pt-10">
        <RefinementList
          attribute="color.original_name"
          transformItems={(items) =>
            items.map((item) => ({
              ...item,
              label:
                item.label.slice(0, 1).toLocaleUpperCase() +
                item.label.slice(1),
            }))
          }
        />
      </Filter>
      <Filter header="Size" type={type} className="pt-10">
        <RefinementList attribute="available_sizes" />
      </Filter>
      <Filter header="Price range" type={type} className="pt-10">
        <RangeInput attribute="price.value" />
      </Filter>
    </>
  );
}

export default function Search() {
  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <InstantSearch
        searchClient={searchClient}
        indexName="PROD_pwa_ecom_ui_template_products"
        routing={true}
      >
        <Configure hitsPerPage={9} />
        {/* Mobile filter dialog */}
        <Transition.Root show={mobileFiltersOpen} as={Fragment}>
          <Dialog
            as="div"
            className="relative z-40 lg:hidden"
            onClose={setMobileFiltersOpen}
            unmount={false}
          >
            <Transition.Child
              as={Fragment}
              enter="transition-opacity ease-linear duration-300"
              enterFrom="opacity-0"
              enterTo="opacity-100"
              leave="transition-opacity ease-linear duration-300"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
            >
              <div className="fixed inset-0 bg-black bg-opacity-25" />
            </Transition.Child>

            <div className="fixed inset-0 flex z-40">
              <Transition.Child
                as={Fragment}
                enter="transition ease-in-out duration-300 transform"
                enterFrom="translate-x-full"
                enterTo="translate-x-0"
                leave="transition ease-in-out duration-300 transform"
                leaveFrom="translate-x-0"
                leaveTo="translate-x-full"
              >
                <Dialog.Panel className="ml-auto relative max-w-xs w-full h-full bg-white shadow-xl py-4 pb-6 flex flex-col overflow-y-auto">
                  <div className="px-4 flex items-center justify-between">
                    <h2 className="text-lg font-medium text-gray-900">
                      Filters
                    </h2>
                    <button
                      type="button"
                      className="-mr-2 w-10 h-10 p-2 flex items-center justify-center text-gray-400 hover:text-gray-500"
                      onClick={() => setMobileFiltersOpen(false)}
                    >
                      <span className="sr-only">Close menu</span>
                      <XMarkIcon className="h-6 w-6" aria-hidden="true" />
                    </button>
                  </div>

                  {/* Filters */}
                  <div className="mt-4">
                    <Filters type="disclosure" />
                  </div>
                </Dialog.Panel>
              </Transition.Child>
            </div>
          </Dialog>
        </Transition.Root>

        {/* Breadcrumb */}
        <div className="border-b border-gray-200">
          <nav
            aria-label="Breadcrumb"
            className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"
          >
            <ol
              role="list"
              className="flex items-center space-x-4 py-4 border-t border-gray-200"
            >
              {breadcrumbs.map((breadcrumb) => (
                <li key={breadcrumb.id}>
                  <div className="flex items-center">
                    <a
                      href={breadcrumb.href}
                      className="mr-4 text-sm font-medium text-gray-900"
                    >
                      {breadcrumb.name}
                    </a>
                    <svg
                      viewBox="0 0 6 20"
                      xmlns="http://www.w3.org/2000/svg"
                      aria-hidden="true"
                      className="h-5 w-auto text-gray-300"
                    >
                      <path
                        d="M4.878 4.34H3.551L.27 16.532h1.327l3.281-12.19z"
                        fill="currentColor"
                      />
                    </svg>
                  </div>
                </li>
              ))}
              <li className="text-sm">
                <a
                  href="#"
                  aria-current="page"
                  className="font-medium text-gray-500 hover:text-gray-600"
                >
                  Back-to-School Sale
                </a>
              </li>
            </ol>
          </nav>
        </div>

        <div className="max-w-2xl mx-auto px-4 lg:max-w-7xl lg:px-8">
          <div className="border-b border-gray-200 pt-24 pb-10">
            <h1 className="text-4xl font-bold tracking-tight text-gray-900">
              Back-to-School Sale
            </h1>
            <p className="mt-4 text-base text-gray-500">
              Better than ever, and up to 30% off!
            </p>
          </div>

          <div className="pt-12 pb-24 lg:grid lg:grid-cols-3 lg:gap-x-8 xl:grid-cols-4">
            <aside>
              <h2 className="sr-only">Filters</h2>

              <button
                type="button"
                className="inline-flex items-center lg:hidden"
                onClick={() => setMobileFiltersOpen(true)}
              >
                <span className="text-sm font-medium text-gray-700">
                  Filters
                </span>
                <PlusIcon
                  className="flex-shrink-0 ml-1 h-5 w-5 text-gray-400"
                  aria-hidden="true"
                />
              </button>

              <div className="hidden lg:block divide-y divide-gray-200 space-y-10">
                <Filters type="list" />
              </div>
            </aside>

            <section
              aria-labelledby="product-heading"
              className="mt-6 lg:mt-0 lg:col-span-2 xl:col-span-3"
            >
              <h2 id="product-heading" className="sr-only">
                Products
              </h2>

              <InfiniteHits hitComponent={HitComponent} showPrevious={true} />
            </section>
          </div>
        </div>
      </InstantSearch>
    </>
  );
}
